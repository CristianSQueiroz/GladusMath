/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gladusmath;

import java.awt.Graphics;
import java.awt.Polygon;

/**
 *
 * @author csqueiroz
 */
public class DrawForms extends javax.swing.JFrame {

    /**
     * Creates new form DrawForms
     */
    public DrawForms() {
        initComponents();
        this.setSize(800, 800);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrawForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrawForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrawForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrawForms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrawForms().setVisible(true);
            }
        });
    }

    public void paint(Graphics g) {
        // Chama o desenho da tela.  
        super.paint(g);

        Double x1 = 3d;
        Double x2 = 3d;
        Double y1 = 10d;
        Double y2 = 3d;
        Double z1 = 3d;
        Double z2 = 5d;

        boolean precisaDeIncremento = true;

        while (precisaDeIncremento) {
            if (x1 < 5
                    || x2 < 5
                    || y1 < 5
                    || y2 < 5
                    || z1 < 5
                    || z2 < 5) {

                precisaDeIncremento = true;

            } else {
                precisaDeIncremento = false;
            }
            if (precisaDeIncremento) {
                x1++;
                x2++;
                y1++;
                y2++;
                z1++;
                z2++;

            }
        }

        x1 *= 10;
        x2 *= 10;
        y1 *= 10;
        y2 *= 10;
        z1 *= 10;
        z2 *= 10;

        precisaDeIncremento = true;
        while (precisaDeIncremento) {
            if (x1 < 300
                    || x2 < 300
                    || y1 < 300
                    || y2 < 300
                    || z1 < 300
                    || z2 < 300) {

                precisaDeIncremento = true;

            } else {
                precisaDeIncremento = false;
            }
            if (precisaDeIncremento) {
                x1+=((x1/100)*20);
                x2+=((x2/100)*20);
                y1+=((y1/100)*20);
                y2+=((y2/100)*20);
                z1+=((z1/100)*20);
                z2+=((z2/100)*20);

            }
        }
        System.out.println(x1.intValue());
        System.out.println(x2.intValue());
        System.out.println(y1.intValue());
        System.out.println(y2.intValue());
        System.out.println(z1.intValue());
        System.out.println(z2.intValue());

        Polygon poligono = new Polygon();
        poligono.addPoint(x2.intValue(), x1.intValue());
        poligono.addPoint(y2.intValue(), y1.intValue());
        poligono.addPoint(z2.intValue(), z1.intValue());

        // Desenha o triÃ¢ngulo  
        g.drawPolygon(poligono);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
